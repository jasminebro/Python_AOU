---
title: "Data Structures"
format: ipynb
editor: visual
jupyter: python3
---

# Day1: Data Structures

```{r setup}

#| echo: false

library(reticulate)

```

## Data Structures

### Tuples

-   Fixed length immutable objects that cannot be changed once assigned.

-   Easily created by having comma separated values enclosed in parenthesis

    ```{python}

     TupleExample = (7,8,9) #create sequence of numbers TupleExample
     
     TupleExample

    ```

### Lists

-   Variable length and contents can be modified and are mutable

-   Created by using \[\] or just the list function

```{python}

ListA = [2,2,5]
ListA

Tup = (5,0,4)
Tup

ListB = list(Tup)
ListB


```

#### Adding and Removing

##### **Append**

```{python}

ListA.append("Mia")
ListA
```

##### **Insert**

-   You can insert at a certain location

-   Note: In python, counting/indexing begins at 0. So, "crawfish" will insert as the second element in our list.

```{python}

ListA.insert(1,"crawfish")
ListA

```

##### Pop

-   Removes and returns at a certain location

```{python}

ListA.pop(2)

ListA



```

##### Remove

-   removes first instance

```{python}

ListA.remove("crawfish")
ListA

```

##### Combining/ Concatenating

-   Using the + sign will concatenate a list or tuple

    ```{python}

    ["five","love","biology"] + ["LSU", "BCM", "LA"]
    ```

-   You can append multiple elements by using extend

    ```{python}

    y = [6,"house", "car"]

    y.extend([9,0,(32,3)])

    y
    ```

##### Sorting

-   Sort items by value

```{python}

a = [5,3,1,90,56]
a
a.sort ()
a
```

##### Slicing

-   Extract a range of values with the basic form of start:stop and using the indexing operator \[\]

```{python}

sequence = ["cccccc", "ttttt", "aaaaa", "ccccc"]

sequence[0:2]

```

#### Dictionary/ dict

-   Stores key-value pairs. The key and value are both python objects.

-   Typically {} and : are used to create Python dictionaries.

    ```{python}

    Dict1 = {"car":"beetle","model":"volkswagen", "year": "2010"}

    Dict1

    Dict1["model"] #Pull model
    "model" in Dict1 #Check to see if model is in the dictionary 

    ```

-   You can delete values using del or pop.

    ```{python}

    Dict1["state"] = "Louisiana"

    Dict1

    Dict1["home"] = "Space"

    Dict1

    del Dict1["state"]

    Dict1.pop("home")

    Dict1
    ```

-   You can get the keys and values individually, iterate and merge dictionaries

```{python}

list(Dict1.keys())
list(Dict1.values())

#you can iterate over the values and keys by turning your dictionary into individual tuples 

list(Dict1.items())



```

#### Set

-   A set is an unordered group of elements.

-   Sets are created two ways: 1) with the set function 2) a set literal with {}

    ```{python}

    set([4,7,8,9])

    {4,2,3,1}
    ```

To combine two sets you can use .union or \|

```{python}

d = {4,5,6,8}
e = {9,0,3}

d.union(e)

d|e
```

[Commonly use set methods reference:]{.underline}

[https://www.geeksforgeeks.org/python-Commonly used set methods-methods/](https://www.geeksforgeeks.org/python-set-methods/ "Commonly used set methods")

#### Built-In Sequence Functions

-   useful functions that can and should be used when you get a chance

#### enumerate

-   When iterating and you want to keep track of an index/count you can use enumerate

    ```{python}

    for index,value in enumerate(d):
      print(f'{index}:{value}')
    ```

#### sorted

-   returns a new sorted list from input sequence

    ```{python}

    sorted("Baylor College of Medicine")
    ```

#### zip

-   creates pairs of items from a group of lists, tuples, or sequences

```{python}

item1 = ["goodmorning", "hello", "goodbye"]
item2= ["goodnight", "world", "friend"]

zipitems = zip(item1,item2)

list(zipitems)
```

-   A common use of zip is to combine it with enumerate to iterate multiples items

    ```{python}

    item1 = ["goodmorning", "hello", "goodbye"]
    item2= ["goodnight", "world", "friend"]

    for index, (a,b) in enumerate(zip(item1, item2)):
        print(f"{index}: {a},{b}")
    ```

#### reversed

```{python}


```

#### List, Set and Dictionary Comprehensions

#### Nested List Comprehensions
