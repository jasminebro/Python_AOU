---
title: "pandas"
format: ipynb
editor: visual
jupyter: python3
---

# pandas

-   pandas is compiled of data structure and data manipulation tools to assist with data cleaning and analysis

-   pandas is typically used in addition to NumPy, SciPy, and matplotlib

pandas has two data structures: Series and DataFrame

## Series 

-   Series are one dimensional array-like objects that contain values of the same type and has data labels called its index

    ```{r}
    library(reticulate)

    ```

```{python}

import pandas as pd
from pandas import Series, DataFrame

ser = pd.Series([4, 7, -5, 3, "NA"])

print(ser)
```

## DataFrame

-   A dataframe is a rectangular table of data that contains ordered named columns

-   Each column can be a different data type ( numeric, string, Boolean, etc.)

-   DataFrames have both row and column index

```{python}

data = {"car": ["Volvo", "Volkswagen", "Dodge", "GMC", "Chevy", "Mazda"],
        "year": [2000, 2001, 2002, 2001, 2002, 2003],
        "cylinders": [1, 1, 3, 2, 2, 3]}
frame = pd.DataFrame(data)

print(frame)

#head is used to display the first 5 lines
print(frame.head)

#tail is used to display the last 5 lines of the data frame

print(frame.tail)

#You can arrange the column order by specifying the column names

frame2 = pd.DataFrame(data, columns=["car", "year", "cylinders"])

print(frame2)

#you can add an empty column, but it will appear with missing values

frame3 = pd.DataFrame(data, columns=["car", "year", "cylinders", "accidents"])

print(frame3)

#you can retrieve a column by using a [] notation or a dot/. notation

print(frame3["year"])
print(frame3.year)

#rows can be retrieved by position or name with the iloc and loc attributes 

print(frame3.loc[1])

print(frame3.loc[2])

#Columns can also be modified by assigning values 
print(frame3)

frame3["accidents"]= 9

print(frame3)

```

-   Let's try to use pandas with our AOU Rural Survey csv file

    ```{python}

    pd.read_csv("AOURuralSurvey.csv")

    csv_1 = pd.read_csv("AOURuralSurvey.csv")

    print(csv_1.head())

    #get column names

    print(csv_1.columns)

    #check to see is columns are null

    print(csv_1.isnull())

    #a nicer way to see this is to sum the null 

    print(csv_1.isnull().sum())

    #we can also drop the rows containing NA  values from our dataframe 

    csv_2 = csv_1.dropna() 

    print(csv_2)

    #OOPS we dropped every row in our data frame! Let's try again.

    #This time we will only drop the columns containing NA

    csv_3 = csv_1.dropna(1)
    #Note pandas will be updating soon and the column name will replace the number 1

    #we can also fill the na values in our dataframes

    csv_4 =  csv_1.fillna({"survey_version_name":"version2.2"})

    print(csv_4)



    ```
